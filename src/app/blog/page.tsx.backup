'use client'

import { useState, useEffect, useCallback } from 'react'
import Link from 'next/link'
import { useAuth } from '@/lib/auth/auth-context'
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { 
  AlertCircle, 
  Filter, 
  Search, 
  FolderOpen, 
  Tag as TagIcon, 
  Calendar, 
  Clock, 
  Eye, 
  MessageCircle, 
  ChevronLeft, 
  ChevronRight,
  RefreshCw
} from 'lucide-react'
import { Post } from '@/types/database'

interface Category {
  id: string
  name: string
  description?: string | null
  color?: string | null
  created_at: string
  post_count?: number
}

interface TagItem {
  id: string
  name: string
  created_at: string
  post_count?: number
}

// 扩展Post类型以包含关联数据
interface PostWithRelations extends Post {
  categories?: Category[]
  tags?: TagItem[]
  comment_count?: number
}

const POSTS_PER_PAGE = 6

export default function BlogPage() {
  const { user } = useAuth()
  const [posts, setPosts] = useState<PostWithRelations[]>([])
  const [total, setTotal] = useState(0)
  const [currentPage, setCurrentPage] = useState(1)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [loading, setLoading] = useState(true)
  
  // 过滤状态
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [selectedTag, setSelectedTag] = useState<string | null>(null)
  
  // 展开状态
  const [showFilters, setShowFilters] = useState(false)

  // 分类和标签统计数据
  const [categoryTagStats, setCategoryTagStats] = useState<{
    categories?: Category[]
    tags?: TagItem[]
  }>({})

  // 加载文章数据 - 使用API接口
  const loadPosts = useCallback(async () => {
    try {
      setLoading(true)
      
      // 使用API接口获取文章数据
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: POSTS_PER_PAGE.toString(),
        status: 'published'
      })

      if (searchTerm) params.append('search', searchTerm)
      if (selectedCategory) params.append('categoryId', selectedCategory)
      if (selectedTag) params.append('tagId', selectedTag)

      const response = await fetch(`/api/blog?${params}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store'
      })

      if (!response.ok) {
        throw new Error('Failed to fetch posts')
      }

      const result = await response.json()

      setPosts(result.data)
      setTotal(result.total)
      if (result.filters) {
        setCategoryTagStats(result.filters)
      }
    } catch (error) {
      console.error('加载文章失败:', error)
    } finally {
      setLoading(false)
    }
  }, [currentPage, searchTerm, selectedCategory, selectedTag])

  // 手动刷新
  const handleRefresh = async () => {
    setIsRefreshing(true)
    await loadPosts()
    setIsRefreshing(false)
  }

  useEffect(() => {
    loadPosts()
  }, [loadPosts])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    setCurrentPage(1)
  }

  const clearFilters = () => {
    setSearchTerm('')
    setSelectedCategory(null)
    setSelectedTag(null)
    setCurrentPage(1)
  }

  const estimateReadingTime = (content: string): number => {
    const wordsPerMinute = 200
    const words = content.split(/\s+/).length
    return Math.ceil(words / wordsPerMinute)
  }

  // 计算总页数
  const totalPages = Math.ceil(total / POSTS_PER_PAGE)
  
  // 格式化日期函数
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString)
    return date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-900 dark:to-blue-900/20">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="w-full max-w-7xl mx-auto">
          {/* Hero Section */}
          <div className="text-center mb-16">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent mb-3">
                  博客
                </h1>
                <p className="text-xl text-muted-foreground max-w-2xl">
                  分享见解、记录思考、传递价值
                </p>
              </div>
              <div className="flex items-center gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleRefresh}
                  disabled={isRefreshing}
                  className="flex items-center gap-2 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors"
                >
                  <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />
                  刷新
                </Button>
                {user && (
                  <Button asChild size="sm" className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
                    <Link href="/blog/new">
                      新建文章
                    </Link>
                  </Button>
                )}
              </div>
            </div>
          </div>

        {/* 搜索和过滤 */}
        <div className="bg-white/80 backdrop-blur-sm dark:bg-gray-800/80 rounded-2xl shadow-xl border border-gray-200/50 dark:border-gray-700/50 mb-12 p-8" key="search-filter-card">
          <div className="flex flex-col lg:flex-row gap-8">
            {/* 搜索框 */}
            <div className="flex-1">
              <form onSubmit={handleSearch} className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
                <Input
                  placeholder="搜索文章、标签或内容..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-12 pr-4 py-4 text-lg border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:border-blue-500 dark:focus:border-blue-400 transition-all bg-white dark:bg-gray-900 shadow-sm"
                />
                <Button
                  type="submit"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6"
                >
                  搜索
                </Button>
              </form>
            </div>

            {/* 过滤器切换 */}
            <div className="flex items-center gap-4">
              <Button
                variant={showFilters ? "default" : "outline"}
                size="lg"
                onClick={() => setShowFilters(!showFilters)}
                className={`flex items-center gap-2 transition-all ${showFilters ? 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700' : 'hover:bg-blue-50 dark:hover:bg-blue-900/20'}`}
              >
                <Filter className="h-5 w-5" />
                {showFilters ? '隐藏过滤器' : '显示过滤器'}
              </Button>
              {(searchTerm || selectedCategory || selectedTag) && (
                <Button
                  variant="ghost"
                  size="lg"
                  onClick={clearFilters}
                  className="text-gray-600 hover:text-red-600 dark:text-gray-400 dark:hover:text-red-400 transition-colors"
                >
                  清除过滤
                </Button>
              )}
            </div>
          </div>

          {showFilters && (
            <div className="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* 分类过滤 */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold flex items-center gap-2 text-gray-900 dark:text-gray-100">
                    <FolderOpen className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                    文章分类
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    <Button
                      variant={selectedCategory ? 'outline' : 'default'}
                      size="sm"
                      onClick={() => setSelectedCategory(null)}
                      key="all-categories"
                      className={`transition-all ${selectedCategory ? 'hover:bg-blue-50 dark:hover:bg-blue-900/20' : 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700'}`}
                    >
                      全部文章
                    </Button>
                    {categoryTagStats?.categories?.map(category => (
                      <Button
                        key={category.id}
                        variant={selectedCategory === category.id ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setSelectedCategory(category.id)}
                        className={`flex items-center gap-2 transition-all ${selectedCategory === category.id ? 'bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700' : 'hover:bg-blue-50 dark:hover:bg-blue-900/20'}`}
                      >
                        {category.name}
                        <Badge variant="secondary" className="text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100">
                          {category.post_count || 0}
                        </Badge>
                      </Button>
                    ))}
                  </div>
                </div>

                {/* 标签过滤 */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold flex items-center gap-2 text-gray-900 dark:text-gray-100">
                    <TagIcon className="h-5 w-5 text-purple-600 dark:text-purple-400" />
                    热门标签
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    <Button
                      variant={selectedTag ? 'outline' : 'default'}
                      size="sm"
                      onClick={() => setSelectedTag(null)}
                      key="all-tags"
                      className={`transition-all ${selectedTag ? 'hover:bg-purple-50 dark:hover:bg-purple-900/20' : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700'}`}
                    >
                      全部标签
                    </Button>
                    {categoryTagStats?.tags?.slice(0, 10).map(tag => (
                      <Button
                        key={tag.id}
                        variant={selectedTag === tag.id ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setSelectedTag(tag.id)}
                        className={`flex items-center gap-1 transition-all ${selectedTag === tag.id ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700' : 'hover:bg-purple-50 dark:hover:bg-purple-900/20'}`}
                      >
                        #{tag.name}
                        <Badge variant="secondary" className="text-xs bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100">
                          {tag.post_count || 0}
                        </Badge>
                      </Button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* 文章列表 */}
        {loading ? (
          <div className="flex justify-center py-20">
            <div className="flex flex-col items-center gap-4">
              <div className="animate-spin rounded-full h-12 w-12 border-4 border-blue-200 border-t-blue-600"></div>
              <p className="text-gray-600 dark:text-gray-400">加载中...</p>
            </div>
          </div>
        ) : posts.length === 0 ? (
          <div className="bg-white/80 backdrop-blur-sm dark:bg-gray-800/80 rounded-2xl shadow-xl border border-gray-200/50 dark:border-gray-700/50 p-16 text-center">
            <AlertCircle className="h-16 w-16 text-gray-400 dark:text-gray-500 mx-auto mb-6" />
            <h3 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">没有找到文章</h3>
            <p className="text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto">
              {searchTerm || selectedCategory || selectedTag
                ? '没有匹配您搜索条件的文章。请尝试其他关键词或过滤器。'
                : '目前还没有发布的文章。'}
            </p>
            {(searchTerm || selectedCategory || selectedTag) && (
              <Button
                onClick={clearFilters}
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              >
                清除过滤器
              </Button>
            )}
          </div>
        ) : (
          <>
            <div className="grid gap-8 mb-12">
              {posts.map(post => {
                const readingTime = estimateReadingTime(post.content || '')
                return (
                  <article key={post.id} className="group relative">
                    <div className="bg-white/80 backdrop-blur-sm dark:bg-gray-800/80 rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50 p-8 transition-all duration-300 hover:shadow-2xl hover:border-blue-300 dark:hover:border-blue-700 hover:-translate-y-1">
                      {/* 文章标题 */}
                      <header className="mb-6">
                        <h2 className="text-3xl font-bold mb-4 leading-tight">
                          <Link
                            href={`/blog/${post.id}`}
                            className="text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition-colors group-hover:text-blue-600 dark:group-hover:text-blue-400"
                          >
                            {post.title}
                          </Link>
                        </h2>

                        {/* 摘要 */}
                        {post.excerpt && (
                          <p className="text-lg text-gray-600 dark:text-gray-400 leading-relaxed line-clamp-3">
                            {post.excerpt}
                          </p>
                        )}
                      </header>

                      {/* 标签和分类 */}
                      <div className="flex flex-wrap gap-3 mb-6">
                        {post.categories?.slice(0, 3).map((category: Category) => (
                          <Badge
                            key={category.id}
                            variant="secondary"
                            className="px-3 py-1.5 bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 cursor-pointer hover:bg-blue-200 dark:hover:bg-blue-800/50 transition-colors border-0"
                            onClick={() => {
                              setSelectedCategory(category.id)
                              window.scrollTo({ top: 0, behavior: 'smooth' })
                            }}
                          >
                            {category.name}
                          </Badge>
                        ))}
                        {post.tags?.slice(0, 5).map((tag: TagItem) => (
                          <Badge
                            key={tag.id}
                            variant="outline"
                            className="px-3 py-1.5 bg-purple-100 text-purple-800 dark:bg-purple-900/50 dark:text-purple-300 border-purple-300 dark:border-purple-700 cursor-pointer hover:bg-purple-200 dark:hover:bg-purple-800/50 transition-colors flex items-center gap-1.5"
                            onClick={() => {
                              setSelectedTag(tag.id)
                              window.scrollTo({ top: 0, behavior: 'smooth' })
                            }}
                          >
                            <TagIcon className="h-3 w-3" />
                            #{tag.name}
                          </Badge>
                        ))}
                      </div>

                      {/* 元信息 */}
                      <footer className="flex items-center justify-between text-sm">
                        <div className="flex items-center gap-6 text-gray-600 dark:text-gray-400">
                          <div className="flex items-center gap-2">
                            <Calendar className="h-4 w-4" />
                            <time dateTime={post.published_at || post.created_at}>
                              {formatDate(post.published_at || post.created_at)}
                            </time>
                          </div>
                          <div className="flex items-center gap-2">
                            <Clock className="h-4 w-4" />
                            <span>{readingTime} 分钟阅读</span>
                          </div>
                        </div>
                        <div className="flex items-center gap-6 text-gray-600 dark:text-gray-400">
                          <div className="flex items-center gap-2">
                            <Eye className="h-4 w-4" />
                            <span>{post.view_count || 0} 次浏览</span>
                          </div>
                          {post.comment_count !== undefined && (
                            <div className="flex items-center gap-2">
                              <MessageCircle className="h-4 w-4" />
                              <span>{post.comment_count} 条评论</span>
                            </div>
                          )}
                        </div>
                      </footer>

                      {/* 悬浮效果 */}
                      <div className="absolute inset-0 bg-gradient-to-r from-blue-600/5 to-purple-600/5 dark:from-blue-400/5 dark:to-purple-400/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"></div>
                    </div>
                  </article>
                )
              })}
            </div>

            {/* 分页 */}
            {totalPages > 1 && (
              <div className="flex justify-center items-center gap-4 p-8 bg-white/80 backdrop-blur-sm dark:bg-gray-800/80 rounded-2xl shadow-lg border border-gray-200/50 dark:border-gray-700/50">
                <Button
                  variant="outline"
                  size="lg"
                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                  disabled={currentPage === 1}
                  className="flex items-center gap-2 disabled:opacity-50"
                >
                  <ChevronLeft className="h-5 w-5" />
                  上一页
                </Button>

                <div className="flex items-center gap-2">
                  <span className="text-gray-600 dark:text-gray-400">
                    第
                  </span>
                  <span className="text-xl font-bold text-gray-900 dark:text-gray-100">
                    {currentPage}
                  </span>
                  <span className="text-gray-600 dark:text-gray-400">
                    页，共 {totalPages} 页
                  </span>
                </div>

                <Button
                  variant="outline"
                  size="lg"
                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                  disabled={currentPage === totalPages}
                  className="flex items-center gap-2 disabled:opacity-50"
                >
                  下一页
                  <ChevronRight className="h-5 w-5" />
                </Button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  )
}